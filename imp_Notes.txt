Ways of component Communication

why?
The scenario where two or more components need to interact is known as component communication.
There are multiple ways to achieve the component communication.

there are 3 ways that we generally use :-
Using @Input and @Output
Using @ViewChild and @ContentChild
Using Services

@Input :-
Input is a decorator which is used to pass the data from parent component to child component
we can also call parent component to child component relationship as smart component and dumb component.
Parent component is a smart component which knows from where to get data and child component is a dumb component which does not known anything, it just need to know what to render.

@Output :-

  @Output() selectedRoom = new  EventEmitter<RoomList>();

Output is a decorator which is used to pass the data from child component to parent component
EventEmitter is a class which is used to emit the event
selectedRoom is the event which will be emitted to the parent component
RoomList is the type of data which will be emitted



About ChangeDetection in Angular:-

Whenever we do some action or change in data in realtime, view needs to be updated automatically in realtime and in angular it happens by ChangeDetection.

Change detection in Angular is a fundamental concept that helps Angular applications keep their user interfaces in sync with the application's data model. 
Angular automatically detects changes to the application's data and updates the view accordingly.

when we do some action on a perticular componenet then angular default change detection will scan for each and every component which is unnecessary.

  
	changeDetection: ChangeDetectionStrategy.OnPush
  
  @Component({
  selector: 'app-rooms-list',
  standalone: false,
  templateUrl: './rooms-list.component.html',
  styleUrl: './rooms-list.component.scss',
  changeDetection: ChangeDetectionStrategy.OnPush
})
ChangeDetectionStrategy is a core concept in Angular which is used to improve the performance of the application
OnPush is a strategy which is used to detect the changes only when the input property is changed from the parent component
 It will not detect the changes when the input property is changed from it's child component
 The componenet shouldnot be changing data internally.
 
 whenever we do some changes in input we should return a new instance which is a good practice
 eg:-    this.roomList = [...this.roomList, newRoom];
 Here we are returning a new instance of roomList array with the new room added to it, we are not mutating the existing array.
 
	this.roomList.push(newRoom);
Here are mutating the existing array which means we are changing the existing array, which is not a good practice


**LifeCycle Hook***

--ngOnChanges (LifeCycle Hook)

ngOnChanges life clycle hook can be applied on a componenet which has input property and we cannot apply it anywhere else.
  ngOnChanges(changes: SimpleChanges): void {
    console.log(changes);
	}
	
ngOnChanges is a lifecycle hook which is called by Angular when the input property is changed
It will take the changes as an argument which is of type SimpleChanges
SimpleChanges is an interface which is used to get the previous value and current value of the input property


--ngDoCheck (LifeCycle Hook) // try to avoid using it as much as possible 
  ngDoCheck is a lifecycle hook called by Angular to indicate that Angular is done checking the component
  It should be used for logic
  It works in a way that after the checking of the component, it will be called
  It will detect any changes in the component unlike ngOnChanges(It detects changes for just input property)
  
--ngOndestroy
	ngOndestroy is a lifecycle hook which is called by Angular when the component is destroyed
	It should be used to clean up the resources which are used by the component
	It should be used to unsubscribe the observables and remove the event listeners
	It should be used to remove the child components which are created dynamically
  ngOnDestroy(): void{
    console.log("Rooms List Component is destroyed");
  }
  
  
  
--Using ng-template we can dynamically render a component in any component and modify their properties accordinglty.
  
  .html code - 
					<div>
						<ng-template #user></ng-template>
					</div>
					
	.ts code - 
					@ViewChild('user', {read: ViewContainerRef}) vcr!: ViewContainerRef;
					
					ngAfterViewInit(): void {
					//createComponent is a method which is used to create the component dynamically
					//RoomsComponent is the component which we are creating dynamically

					const componentRef = this.vcr.createComponent(RoomsComponent);

					/We can pass the data to the child component using the instance property
					//numberOfRooms is the property of the child component
    
					componentRef.instance.numberOfRooms = 20;

					}

-- Content Projection(ng-content)
	Content projection is a pattern in which you insert, or project, the content you want to use inside another component.
	Use of ng-content tag 
		using this we can restrict lower level developers from positining of elements or componenets in a screen like with the help of <ng-content></ng-content> 
		we can pre decide that header component will always come first and footer component will always come last.
		


**Dependency Injection(DI)**

	Dependencies are services or objects needed by classes to perform some function.
	It's a design pattern.
	Angular has built-in Dependency Injection support.
	
	In angular dependency can be class inside a componenet or inside a service.
	
	
	--DI providers -
		Class based providers.
		Value Providers.
		Factory.
		
		
		There are some of the code that we write can be reuseble and to reuse those we separate them in the form of services.
		Services are those in which we write our businees logic.
		To get  the data from apis we should use services.
		We can do Component interaction using servies 
				- Sharing data between multiple componenet or within app 
		To use a service in a component we must register that servies into that component or at root level using providers.
		Root level -  when we register it in this way then it return its instance only one time for every componenet so in this case
							we do not need to register it saperatly for every component.
							ex: -  In service.ts file we must add this code, outside the main class of that file.
										@Injectable({
												providedIn: 'root'
										})
										// This service is used to get the list of rooms from the server.
										// It is a singleton service which means it will be created only once and will be used throughout the application.
										// It is provided in the root module which means it will be available throughout the application.
										// It is a good practice to provide the service in the root module so that it can be used throughout the application.
										// Dependency injection in Angular is used to inject services into components in a structured way. When a service is provided at the root level, 
											it is available throughout the app and managed as a singleton. If a service is not used anywhere in the app, 
											Angularâ€™s build optimization may remove it from the final bundle to reduce the application size.
										
		Component level - when we do it for every componenet saperalty then for each componenet one instance of that service class will be created.
								   we do it when it is necessary to have different instance for each component.
								   ex: - 
								   @Component({
											selector: 'app-employee',
											standalone: false,
											templateUrl: './employee.component.html',
											styleUrl: './employee.component.scss',
											providers: [RoomsService]
											// providers: [RoomsService] is used to provide the service to the component
											// If we want to provide the service to the whole application then we should provide it in app.module.ts
											// If we want to provide the service to the component then we should provide it in the component
											// If we want to provide the service to the module then we should provide it in the module
									})
		
		Module level -  providers array in app.module.ts or any feature module(like if we are creating multiple module then we can add providers array saperalty in those modules).
	
	--Resolution Modifiers : There are four resolution modifiers that exists.
										1. Self
										2. SkipSelf
										3. Optional
										4. Host
										
										Self : - 
													 //@Self() is a decorator which is used to get the instance of the service
													 // It will not go to the parent component to get the instance of the service
													 // It will only get the instance of the service which is provided in the component
													 // when we are sure that the service is provided in the component and we don't want to go to the parent component to get the instance of the service
													 // It is used to avoid the circular dependency
													 
													constructor(@Self() private roomService: RoomsService) { 

													}
													
													
										SkipSelf :-
														 //@SkipSelf() is a decorator which is used to get the instance of the service
														// It will go to the parent component to get the instance of the service
														// It will not get the instance of the service which is provided in the component
														// It is used to avoid the circular dependency
														
														   constructor(@SkipSelf() private roomService: RoomsService) {
																  console.log(roomService);
															}
													
										Optional :- 
														//@Optional() is a decorator which is used to make the dependency optional
														//It will not throw an error if the dependency is not provided
														//It will return null if the dependency is not provided
														//It is used to avoid the circular dependency
														//LoggerService is a service which is used to log the messages
														constructor(@Optional() private logger: LoggerService) { }
										
										Host :- 
														The @Host() decorator in Angular is used to ensure that a dependency is resolved from the host component or directive, 
														preventing Angular from searching further up the injector tree. 
														This is useful when you want to enforce that a dependency is provided only by a specific host element.
														constructor(@Host() private logger: LoggerService) { }
			
			Value Providers:-  Value providers in Angular allow you to provide a constant or predefined value as a dependency using the useValue property in the providers array. 
										This is useful for injecting configuration settings, static data, or simple objects into components or services.
										
										
										
										
										
										
										
										
										
**Angular Http and Observables**
	Agenda :-
		1. Introduction
		2. Setting Up HttpClient
		3. Using HttpClient Service
		4. RxJs, Observables and streams
		5. http methods
		6. Rxjs Operators
		7. Http Interceptors
		8. APP_INITIALIZERS
		
		
		--Introduction :-
			In enterprise apps, you need to interact with APIs.
			HttpClient is Service provided by angular to interact with APIs.
			HttpClient internally uses RxJs.
			
		--Setting Ip HttpClient:-
			We need to import HttpClientModule. (now depricated)
			Once module is imported we can inject HttpClient Service.
			//HttpClientModule is no longer needed in newer Angular versions (starting from Angular 15) because HttpClient is now provided using the provideHttpClient() function.
			
		--Using HttpClient Service :-
			  getRooms(){
					// return this.roomList;
					return this.http.get<RoomList[]>('/api/rooms')
				}
				
		--RxJs, Observables and streams:-
				Angular uses Rxjs internally.
				RxJs is an library for writing Reactive Programming.
				Observables are stream of data to which we can subscribe.
				Angular leverages RxJS Observables to manage state and asynchronous data streams efficiently. 
				When an observable (e.g., an HTTP request or a shared service data stream) emits new data, all subscribed components automatically receive updates, 
				eliminating the need to manually call getData() again. This reactive approach ensures real-time data synchronization across the application.
				
				  stream = new Observable(observer => {
					observer.next('user1'); //user1,2,3 are the data
					observer.next('user2');
					observer.next('user3');
					observer.complete();
				});
				
				ngOnInit() {
					this.stream.subscribe(data => {console.log(data)}); //this will print the data that are comming in the stream.
				}
				
		-RxJs Operators :- 
				1. ShareReplay
				2. CatchError
				3. Map operators
				
				Why do we need Operators here ?
					- As we know Rxjs gives us the stream of data and that stream of data canot be modified after subscribing it, it can be modified before subscribing.
					  So here operators comes really handy, if we want to modify it after subscribing.
					  
				1. ShareReplay:-
					It is usefull when we are calling for same data from same api twice. ShareReplay acts as a chaching and store the same data which can be subscribe without calling the api again and again.